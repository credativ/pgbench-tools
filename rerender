#!/bin/bash
set -x
source ./config

# Take clients and rate limit from command line if passed, use defaults
# otherwise

# psql statements for the test database and the result database
RESULTPSQL="psql -h $RESULTHOST -U $RESULTUSER -p $RESULTPORT -d $RESULTDB"
echo Storing results using:  $RESULTPSQL

TEST=$1
# Find current test set
cd results/$TEST

SET=`$RESULTPSQL -A -t -c "select set from tests WHERE test=$TEST"`
if [ "$?" -ne "0" ]; then
  echo ERROR  Can\'t read from tests table.  Was the test data installed?
  exit
fi

if [ -z "$SET" ]; then
  echo ERROR:  Attempt to get a test number returned \"$TEST\", aborting
  exit
fi

# Figure out if this version of PostgreSQL includes buffers_backend_fsync
$TESTPSQL -c "SELECT buffers_backend_fsync FROM pg_stat_bgwriter" >> /dev/null 2>&1
if [ "$?" -ne "0" ]; then
  BACKEND_FSYNC="0"
else
  BACKEND_FSYNC="buffers_backend_fsync"
fi

# Setup test directory tree
echo This is test $TEST

gunzip pgbench.log.gz &
gunzip tpsdata.txt.gz &
gunzip latency.txt.gz &
gunzip dirtydata.txt.gz &
wait

# TODO On Solaris, this may need to use /usr/xpg4/bin/tail instead

tps=`grep "(including connections establishing)" results.txt | cut -d " " -f 3`
trans=`grep "number of transactions actually processed:" results.txt | cut -d":" -f 2 | cut -d "/" -f 1`

  $BASEDIR/log-to-csv $TEST < pgbench.log |  $RESULTPSQL -c "copy timing from stdin with csv"

  $RESULTPSQL -q -c "update tests set avg_latency=(select avg(latency) from timing), max_latency=(select max(latency)from timing), percentile_90_latency=(select latency from timing order by latency offset (round(0.90*trans)) limit 1) where tests.test='$TEST'"
  $BASEDIR/dirty-plot < meminfo.log > dirtydata.txt

  if [ ! -z $GNUPLOT ] && [ -x $GNUPLOT ]; then
    # Plot result graphs
    $RESULTPSQL -A -t -F' ' -c "select extract(epoch from date_trunc('second',ts)),count(*) from timing group by date_trunc('second',ts) order by date_trunc('second',ts)" > tpsdata.txt
    $GNUPLOT $BASEDIR/plots/tps.plot

    $RESULTPSQL -A -t -F' ' -c "select extract(epoch from ts),latency from timing" > latency.txt
    $GNUPLOT $BASEDIR/plots/latency.plot

    $GNUPLOT $BASEDIR/plots/dirty.plot

    # TODO If $GNUPLOT is set to something other than its default value from `which`, there
    # should be a command line option in csv2gnuplot that informs the program of that path.

    $BASEDIR/csv2gnuplot -i iostat.log -d iostat -t "pgbench disk writes" --disks="$DISKLIST" --diskstats="wMB/s"
    mv graph.png iostat-writeMB.png

    $BASEDIR/csv2gnuplot -i iostat.log -d iostat -t "pgbench disk reads" --disks="$DISKLIST" --diskstats="rMB/s"
    mv graph.png iostat-readMB.png

    $BASEDIR/csv2gnuplot -i iostat.log -d iostat -t "pgbench disk utilization" --disks="$DISKLIST" --diskstats="%util"
    mv graph.png iostat-util.png

    $BASEDIR/csv2gnuplot -i vmstat.log -d vmstat -t "pgbench vmstat"
    mv graph.png vmstat.png
  else
    echo "gnuplot not found, skipping benchwarmer charts generation"
  fi

cp $BASEDIR/templates/test-index.html index.html
cp $BASEDIR/config config

# Now that we're done plotting and computing stats, wipe the low-level
# data we don't need anymore
$RESULTPSQL -q -c "truncate table timing"

# Save some configuration information about the server
CLIENTHOST=`hostname`
SERVERHOST="$TESTHOST"
if [ "$SERVERHOST" = "localhost" ]; then
  SERVERHOST="$CLIENTHOST"
fi
SETTINGS="pg_settings.txt"

# Write out system and PostgreSQL installation

# Remove temporary files, don't complain if the files are missing e.g.
# because we skipped gnuplot'ing and generating these files
pigz -2 pgbench.log &
pigz -2 tpsdata.txt &
pigz -2 latency.txt &
pigz -2 dirtydata.txt &

wait
